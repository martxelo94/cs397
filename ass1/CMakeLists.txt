CMAKE_MINIMUM_REQUIRED(VERSION 3.6.2)

SET(OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.bin")
SET(DEPENDENCIES_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/lib")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_DIRECTORY}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${OUTPUT_DIRECTORY}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${OUTPUT_DIRECTORY}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${OUTPUT_DIRECTORY}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL "${OUTPUT_DIRECTORY}")

##################################
# Project
SET(PRJ_NAME cs397_project)
PROJECT(${PRJ_NAME})

# C++17
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED True)

FILE(GLOB SRC
	#	"dependencies/src/imgui/*.cpp"
		"dependencies/src/*.c"
		"src/*.cpp"
		"./test/*.cpp")

ADD_EXECUTABLE(${PRJ_NAME} ${SRC} ${SRC_TEST})

##################################
# General options

# SSE
SET(SSE_FLAGS "${SSE_FLAGS} -march=native")

IF (MSVC)
	# Enable warnings
	IF (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
		STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	ELSE ()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
	ENDIF ()

	# Warnings as errors
	#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
	# Disable specific warning
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4201") # nameless struct/union
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4408")
	#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4127")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100")	# unused parameter
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996")
elseIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	# Enable warnings
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
	# Warnings as errors
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
	# Disable specific warning
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-function")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
	#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-stringop-truncation")
ENDIF ()

##################################
# CMake search directories
INCLUDE_DIRECTORIES(dependencies/include)
INCLUDE_DIRECTORIES(dependencies/src)
INCLUDE_DIRECTORIES(./src)

##################################
# Dependencies

# For IMGUI
#ADD_DEFINITIONS(-DIMGUI_IMPL_OPENGL_LOADER_GLAD=1)
#ADD_DEFINITIONS(-DGLAD_GLAPI_EXPORT=1)

IF (MSVC)
	FIND_LIBRARY(LIB_GTESTD gtestd "${DEPENDENCIES_DIRECTORY}")
	FIND_LIBRARY(LIB_GTEST gtest "${DEPENDENCIES_DIRECTORY}")
	#FIND_LIBRARY(LIB_GLFW glfw3dll ${DEPENDENCIES_DIRECTORY})
	#FIND_LIBRARY(LIB_GLAD glad ${DEPENDENCIES_DIRECTORY})
	#FIND_PACKAGE(OpenGL REQUIRED)
	TARGET_LINK_LIBRARIES(${PRJ_NAME} debug ${LIB_GTESTD} optimized ${LIB_GTEST})
	#TARGET_LINK_LIBRARIES(${PRJ_NAME} ${LIB_GLFW})
	#TARGET_LINK_LIBRARIES(${PRJ_NAME} ${LIB_GLAD})
	TARGET_LINK_LIBRARIES(${PRJ_NAME} vcruntime)
	SET_TARGET_PROPERTIES(${PRJ_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ..)
ELSE ()
	FIND_LIBRARY(LIB_GTEST gtest ${DEPENDENCIES_DIRECTORY})
	#FIND_LIBRARY(LIB_GLFW glfw ${DEPENDENCIES_DIRECTORY})
	#FIND_LIBRARY(LIB_GLAD glad ${DEPENDENCIES_DIRECTORY})
	FIND_PACKAGE(Threads REQUIRED)
	TARGET_LINK_LIBRARIES(${PRJ_NAME} ${LIB_GTEST})
	#TARGET_LINK_LIBRARIES(${PRJ_NAME} ${LIB_GLFW})
	#TARGET_LINK_LIBRARIES(${PRJ_NAME} ${LIB_GLAD})
	TARGET_LINK_LIBRARIES(${PRJ_NAME} ${CMAKE_DL_LIBS})
	TARGET_LINK_LIBRARIES(${PRJ_NAME} Threads::Threads)
	TARGET_LINK_LIBRARIES(${PRJ_NAME} X11)
ENDIF ()
